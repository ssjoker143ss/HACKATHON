name: React CI/CD

# This workflow runs on every push to the main branch and pull requests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the jobs
jobs:
  build:

    # Specify the environment this job runs in
    runs-on: ubuntu-latest

    # Steps in the job
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (version 18.x in this example)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # Step 3: Install dependencies (npm install)
      - name: Install dependencies
        run: npm install

      # Step 4: Build the React app
      - name: Build the React app
        run: npm run build

      # Step 5: Run tests (optional, based on your setup)
      - name: Run tests
        run: npm test

  deploy:
    # This job will only run on the main branch and if the build is successful
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      # Step 3: Install dependencies (npm install)
      - name: Install dependencies
        run: npm install

      # Step 4: Build the React app
      - name: Build the React app
        run: npm run build
            
      # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3.0.0
            
      # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Intall JQ
        run:
         sudo apt-get update && sudo apt-get install -y jq
      - name: SonarQube Quality Gate Check 
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
  
    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      - name: set up aws credentilas
        uses: Sumanshu-Nankana/setup-aws-cli@v1
        with:
          region: 'ap-south-1'
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: bayertest
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REPOSITORY: bayerecr
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t bayerecr .
          docker tag bayerecr:latest public.ecr.aws/i1i2o2v2/bayerecr:latest
          docker push public.ecr.aws/i1i2o2v2/bayerecr:latest
        #  docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        # docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      # Step 4: Update kubeconfig to access EKS cluster
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name my-eks-cluster --region ap-south-1
      - run:
         kubectl apply -f deploymentservice.yaml
